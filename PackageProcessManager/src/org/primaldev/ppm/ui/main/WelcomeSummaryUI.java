package org.primaldev.ppm.ui.main;

import java.util.Calendar;
import java.util.List;

import org.activiti.engine.ProcessEngines;
import org.activiti.engine.history.HistoricTaskInstance;
import org.activiti.engine.history.HistoricTaskInstanceQuery;
import org.activiti.engine.history.HistoricVariableInstance;
import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.runtime.ProcessInstanceQuery;
import org.activiti.explorer.ui.reports.ChartComponent;
import org.activiti.explorer.ui.reports.ChartGenerator;
import org.primaldev.ppm.util.ProcessUtil;
import org.primaldev.ppm.util.ReportUtil;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.themes.Reindeer;

public class WelcomeSummaryUI extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button refreshButton;
	@AutoGenerated
	private AbsoluteLayout taskSummaryLayout;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	Label myTasks;
	
	public WelcomeSummaryUI() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		//setSummary();
		setStyle();
		addClickListeners();
	}

	private void setStyle(){
		taskSummaryLayout.setStyleName(Reindeer.LAYOUT_WHITE);
	}
	
	@SuppressWarnings("serial")
	private void addClickListeners(){
		refreshButton.addClickListener(new Button.ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {
				setSummary();
				
			}
		});
		
	}
	
	
	
	protected List<HistoricTaskInstance> queryForTasksToShow() {		
		 HistoricTaskInstanceQuery query = ProcessUtil.getHistoryService().createHistoricTaskInstanceQuery();
		 query.taskCompletedBefore(getEndOfDay().getTime()).orderByTaskPriority().desc().orderByTaskDueDate().desc();
		 return query.list();
	}
	
	private void setSummary(){
		/*
		Label myTasks = new Label();
		
		taskSummaryLayout.addComponent(myTasks);
		 List<HistoricTaskInstance> completed = queryForTasksToShow();
		
		for (HistoricTaskInstance procInst : completed){
			ReportUtil.generateTaskDurationReport(procInst.getProcessDefinitionId());
			generateReport(procInst);
		}
		*/
		
		generateReport(ReportUtil.getProcessListDuration());
	}


	private Calendar getEndOfDay(){
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE,59);
		return cal;
	}

	
	protected void generateReport(ProcessInstance processInstance) {
		// Report dataset is stored as historical variable as json
		HistoricVariableInstance historicVariableInstance = ProcessUtil.getHistoryService()		
		.createHistoricVariableInstanceQuery()
		.processInstanceId(processInstance.getId())
		.variableName("reportData")
		.singleResult();
		
		if(historicVariableInstance != null) {
		// Generate chart
		byte[] reportData = (byte[]) historicVariableInstance.getValue();
		ChartComponent chart = ChartGenerator.generateChart(reportData);
		chart.setWidth(100, Unit.PERCENTAGE);
		chart.setHeight(100, Unit.PERCENTAGE);
		// Put chart on screen
		taskSummaryLayout.addComponent(chart);
		
		// The historic process instance can now be removed from the system
		// Only when save is clicked, the report will be regenerated
		ProcessEngines.getDefaultProcessEngine().getHistoryService().deleteHistoricProcessInstance(processInstance.getId());
		}
	}
	
	
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// taskSummaryLayout
		taskSummaryLayout = new AbsoluteLayout();
		taskSummaryLayout.setCaption("Summary");
		taskSummaryLayout.setImmediate(true);
		taskSummaryLayout.setWidth("560px");
		taskSummaryLayout.setHeight("440px");
		mainLayout.addComponent(taskSummaryLayout, "top:100.0px;left:60.0px;");
		
		// refreshButton
		refreshButton = new Button();
		refreshButton.setCaption("Refresh");
		refreshButton.setImmediate(false);
		refreshButton.setWidth("-1px");
		refreshButton.setHeight("-1px");
		mainLayout.addComponent(refreshButton, "top:560.0px;left:60.0px;");
		
		return mainLayout;
	}

}

package org.primaldev.ppm.ui.process;

import java.util.List;

import org.activiti.engine.FormService;
import org.activiti.engine.ProcessEngines;
import org.activiti.engine.RepositoryService;
import org.activiti.engine.RuntimeService;
import org.activiti.engine.repository.ProcessDefinition;
import org.activiti.engine.repository.ProcessDefinitionQuery;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.PopupView;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnGenerator;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.Reindeer;

public class ProcessListUI extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Table processListTable;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	
	private BeanItemContainer<ProcessDefinition> dataSource;
	public static final String NAME = "ProcessListUI";
	
	public ProcessListUI() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		initTable();		
	}
	
	private void initTable(){
		
		dataSource = new BeanItemContainer<ProcessDefinition>(ProcessDefinition.class,getAllProcessDefinitions());
		Notification.show("PP Form",
                "fsize" + processListTable.size(),
                Notification.Type.TRAY_NOTIFICATION);
		processListTable.setContainerDataSource(dataSource);
		processListTable.setVisibleColumns(new String[] { "name", "key", "version" });
		//processListTable.setVisibleColumns(new String[] { "name", "key", "version","resourceName", "category" });
		processListTable.setSizeFull();
		

 
		//setProcessDefinitions(getAllProcessDefinitions());
		//processListTable.addGeneratedColumn("name", createNameColumnGenerator());	
				
		
	
	}
	
	

	public void setProcessDefinitions(List<ProcessDefinition> definitions) {
		dataSource.removeAllItems();
		dataSource.addAll(definitions);
	}
	
	@SuppressWarnings("serial")
	private ColumnGenerator createNameColumnGenerator() {
		return new ColumnGenerator() {

			@Override
			public Component generateCell(Table source, Object itemId,
					Object columnId) {
				ProcessDefinition processDefinition = (ProcessDefinition) itemId;
				PopupView popupView = createProcessDefinitionPopup(processDefinition);
				return popupView;
			}
		};
	}
	
	
	@SuppressWarnings("serial")
	private PopupView createProcessDefinitionPopup(
			final ProcessDefinition processDefinition) {
		final VerticalLayout layout = new VerticalLayout();
		final PopupView popup = new PopupView(processDefinition.getName(),
				layout);

		layout.setSizeUndefined();
		layout.setMargin(true);
		layout.setSpacing(true);
		Label header = new Label(String.format(
				"What would you like to do with <b>%s</b>?",
				processDefinition.getName()));
		header.setContentMode(Label.CONTENT_XHTML);
		layout.addComponent(header);

		Button startNewInstanceButton = new Button("Start a new instance");
		startNewInstanceButton.addStyleName(Reindeer.BUTTON_SMALL);
		startNewInstanceButton.addListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				//getPresenter().startNewInstance(processDefinition);
				popup.setPopupVisible(false);
			}
		});
		layout.addComponent(startNewInstanceButton);

		return popup;
	}
	
	
	
	
	private List<ProcessDefinition> getAllProcessDefinitions() {
		ProcessDefinitionQuery query = getRepositoryService()
				.createProcessDefinitionQuery();
		return query.orderByProcessDefinitionName().asc().list();
	}

	private RepositoryService getRepositoryService() {
		return ProcessEngines.getDefaultProcessEngine().getRepositoryService();
	}

	private RuntimeService getRuntimeService() {
		return ProcessEngines.getDefaultProcessEngine().getRuntimeService();
	}

	private FormService getFormService() {
		return ProcessEngines.getDefaultProcessEngine().getFormService();
	}
	
	

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("937px");
		mainLayout.setHeight("300px");
		
		// top-level component properties
		setWidth("937px");
		setHeight("300px");
		
		// processListTable
		processListTable = new Table();
		processListTable.setImmediate(false);
		processListTable.setWidth("100.0%");
		processListTable.setHeight("100.0%");
		mainLayout.addComponent(processListTable, "top:0.0px;left:0.0px;");
		
		return mainLayout;
	}

}

package org.primaldev.ppm.ui.process.form;

import java.util.Iterator;
import java.util.logging.Level;

import org.activiti.engine.FormService;
import org.activiti.engine.ProcessEngines;
import org.activiti.engine.form.FormData;
import org.activiti.engine.form.FormProperty;
import org.activiti.engine.form.StartFormData;
import org.activiti.engine.form.TaskFormData;
import org.activiti.engine.repository.ProcessDefinition;
import org.primaldev.ppm.util.UserTaskForm;
import org.primaldev.ppm.util.UserTaskFormContainer;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.ComponentContainer;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.TextField;



public class UserFormViewUI extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	public static final Object NAME = "UserFormViewUI";

	@AutoGenerated
	private AbsoluteLayout mainLayout;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	
	
	ProcessDefinition processDef;

	
	public UserFormViewUI(ProcessDefinition processDef) {
		this.processDef=processDef; 
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		// TODO add user code here
		if (isStartForm()){
			autoBuildForm();
		}
	}
	
	
	private boolean isTaskForm(){
		if ( getFormKey(processDef)!= null) {
			return true;
		}else{
			return false;
		}
	}
	
	private boolean isStartForm(){
		if ( processDef.getId()!= null) {
			return true;
		}else{
			return false;
		}
	}
	
	private String getFormKey(ProcessDefinition processDef) {
		return getFormService().getStartFormData(processDef.getId())
				.getFormKey();
	}
	
	private FormService getFormService() {
		return ProcessEngines.getDefaultProcessEngine().getFormService();
	}
	

	
	
	//test routine
	
	private void autoBuildForm(){

		
		StartFormData formData = getFormService().getStartFormData(processDef.getId());
		populateFormFields(formData);
		
	}
	
	protected void populateFormFields(FormData formData) {
			int i=100;
		
		for (final FormProperty property : formData.getFormProperties()) {		
		
			i=i +50;
			mainLayout.addComponent(new TextField() {{ setValue(property.getValue()); setCaption(property.getId()); setWidth("300px"); }}, "top:" + i + "px;left:260.0px;");
			
		}
	}
	
	public void processFormValues(ComponentContainer layout) {
        Iterator<Component> componentIterator = layout.getComponentIterator();
        while (componentIterator.hasNext()) {
            Component component = componentIterator.next();

            // This would be specifically only for TextFields
            if (component instanceof TextField) {
                System.out.println("Alt 1: TextField String value: "
                        + (String) ((TextField) component).getValue());
            } else if (component instanceof CheckBox) {
                System.out.println("Alt 1: Checkbox boolean value: "
                        + ((CheckBox) component).booleanValue());
            }
   
        }
    }
	
	
	
	private void showTaskForm(String formKey, String taskId) {
	//	UserTaskForm form = userTaskFormContainer.getForm(formKey);
		TaskFormData formData = getFormService().getTaskFormData(taskId);
	//	form.populateForm(formData, taskId);
	//	getView().setForm(form);
	}

	private void showProcessForm(String formKey, String processDefinitionId) {
	//	UserTaskForm form = userTaskFormContainer.getForm(formKey);
		StartFormData formData = getFormService().getStartFormData(processDefinitionId);
	//	form.populateForm(formData, processDefinitionId);
		//getView().setForm(form);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		return mainLayout;
	}

}

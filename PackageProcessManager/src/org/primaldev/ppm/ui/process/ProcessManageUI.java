package org.primaldev.ppm.ui.process;

import java.awt.image.BufferedImage;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;

import javax.imageio.ImageIO;

import org.activiti.engine.ActivitiIllegalArgumentException;
import org.activiti.engine.repository.ProcessDefinition;
import org.activiti.engine.repository.ProcessDefinitionQuery;
import org.primaldev.ppm.util.ProcessUtil;
import org.vaadin.dialogs.ConfirmDialog;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.server.StreamResource;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.PopupView;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnGenerator;
import com.vaadin.ui.UI;
import com.vaadin.ui.Upload;
import com.vaadin.ui.Upload.SucceededEvent;
import com.vaadin.ui.Upload.SucceededListener;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.Reindeer;

public class ProcessManageUI extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Upload uploadProcess;
	@AutoGenerated
	private Button removeButton;
	@AutoGenerated
	private Table processTable;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	ProcessUploader receiver;
	
	private BeanItemContainer<ProcessDefinition> dataSource;
	public ProcessManageUI() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		initTable();
		addListeners();
		removeButton.setEnabled(false);
		// TODO add user code here
	}

	
	private void initTable(){
		
		processTable.setSelectable(true);
		processTable.setImmediate(true);
		
		dataSource = new BeanItemContainer<ProcessDefinition>(ProcessDefinition.class,getAllProcessDefinitions());
		
		processTable.setContainerDataSource(dataSource);		
		processTable.setVisibleColumns(new String[] { "name", "key", "version","resourceName", "category" });
		processTable.setSizeFull();
 
		setProcessDefinitions(getAllProcessDefinitions());
		processTable.addGeneratedColumn("name", createNameColumnGenerator());	
		

	
	}
	
	private void addListeners(){
		receiver = new ProcessUploader();
		uploadProcess.setReceiver(receiver);
		
		uploadProcess.addSucceededListener(new SucceededListener(){

			@Override
			public void uploadSucceeded(SucceededEvent event) {
				
				FileInputStream newProcFile = null;
				try {
					newProcFile = new FileInputStream(receiver.getFile().getPath());
					ProcessUtil.getRepositoryService().createDeployment().addInputStream(receiver.getFile().getPath(), newProcFile).deploy();
					
				} catch (FileNotFoundException e) {
					
					e.printStackTrace();
				}				
				setProcessDefinitions(getAllProcessDefinitions());				
			}
			
		});
		
		removeButton.addClickListener( new Button.ClickListener()  {
		    public void buttonClick(Button.ClickEvent event) {		    	
		    	removeProcess();
		    }
		});
		
		processTable.addValueChangeListener(new ValueChangeListener() {
			
			@Override
			public void valueChange(ValueChangeEvent event) {
				updateButtonStates();
				
			}
		});
		
	}
	
	
	private void updateButtonStates() {
		boolean isGroupSelected = processTable.getValue() != null;
		removeButton.setEnabled(isGroupSelected);
		
	}
	
	
	private void removeProcess(){
		ProcessDefinition selectedProcess = (ProcessDefinition) processTable.getValue();
		
		if (selectedProcess != null) {
			ConfirmDialog.show(getUI(), "Please Confirm:", "Are you really sure?",
			        "I am", "Not quite",  new ConfirmDialog.Listener() {

			            public void onClose(ConfirmDialog dialog) {
			                if (dialog.isConfirmed()) {
			                	removeProcessConfirmed();
			                } 
			            }
			        });
		}
		
	}
	
	private void removeProcessConfirmed(){
ProcessDefinition selectedProcess = (ProcessDefinition) processTable.getValue();
		
		if (selectedProcess != null) {
			ProcessUtil.getRepositoryService().deleteDeployment(selectedProcess.getDeploymentId());
		}
		setProcessDefinitions(getAllProcessDefinitions());
	}
	
	
	@SuppressWarnings("serial")
	private ColumnGenerator createNameColumnGenerator() {
		return new ColumnGenerator() {

			@Override
			public Component generateCell(Table source, Object itemId,
					Object columnId) {
				ProcessDefinition processDefinition = (ProcessDefinition) itemId;
				PopupView popupView = createProcessDefinitionPopup(processDefinition);
				return popupView;
			}
		};
	}
	
	
	@SuppressWarnings("serial")
	private PopupView createProcessDefinitionPopup(
			final ProcessDefinition processDefinition) {
		final VerticalLayout layout = new VerticalLayout();
		final PopupView popup = new PopupView(processDefinition.getName(),
				layout);

		layout.setSizeUndefined();
		layout.setMargin(true);
		layout.setSpacing(true);
		Label header = new Label(String.format(
				"What would you like to do with <b>%s</b>?",
				processDefinition.getName()));
		header.setContentMode(ContentMode.HTML);
		layout.addComponent(header);

		Button startNewInstanceButton = new Button("View Diagram");
		startNewInstanceButton.addStyleName(Reindeer.BUTTON_SMALL);
		startNewInstanceButton.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				
				showProcessImage(processDefinition.getId());				
				popup.setPopupVisible(false);
			}
		});
		layout.addComponent(startNewInstanceButton);

		return popup;
	}
	
	private void showProcessImage(String processDefinitionId){
		Window processImageWindow = new Window("Process Image");		
		    if(processDefinitionId == null) {
		      throw new ActivitiIllegalArgumentException("No process instance id provided");
		    }
		    		    
		    StreamResource.StreamSource imagesource = new MyImageSource(processDefinitionId); 
		    try {
				BufferedImage image = ImageIO.read(new MyImageSource(processDefinitionId).getStream());
				processImageWindow.setWidth(String.valueOf(image.getWidth()+ 50) + "px");
				processImageWindow.setHeight(String.valueOf(image.getHeight()+80) + "px");
				
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		   
		    StreamResource resource = new StreamResource(imagesource, "process.png");		    
			final ProcessImageForm processImage = new ProcessImageForm(processImageWindow, resource);
			processImageWindow.setContent(processImage);
			//processImageWindow.setSizeUndefined();
			UI.getCurrent().addWindow(processImageWindow);		   
	}
	
	
	public class MyImageSource  implements StreamResource.StreamSource {

		public String processDefinitionId;
		
		public MyImageSource(String processDefinitionId) {
			this.processDefinitionId = processDefinitionId;
		}
		
		@Override
		public InputStream getStream() {
			// TODO Auto-generated method stub
			return ProcessUtil.getRepositoryService().getProcessDiagram(processDefinitionId);
		}
		
		
		
	}
	
	private List<ProcessDefinition> getAllProcessDefinitions() {
		ProcessDefinitionQuery query = ProcessUtil.getRepositoryService()
				.createProcessDefinitionQuery();
		return query.orderByProcessDefinitionName().asc().list();
	}
	
	public void setProcessDefinitions(List<ProcessDefinition> definitions) {
		dataSource.removeAllItems();
		dataSource.addAll(definitions);
	}
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// processTable
		processTable = new Table();
		processTable.setCaption("Process List");
		processTable.setImmediate(false);
		processTable.setWidth("100.0%");
		processTable.setHeight("100.0%");
		mainLayout.addComponent(processTable,
				"top:180.0px;right:100.0px;bottom:100.0px;left:2.0px;");
		
		// removeButton
		removeButton = new Button();
		removeButton.setCaption("Remove");
		removeButton.setImmediate(true);
		removeButton.setWidth("-1px");
		removeButton.setHeight("26px");
		mainLayout.addComponent(removeButton, "top:114.0px;left:40.0px;");
		
		// uploadProcess
		uploadProcess = new Upload();
		uploadProcess.setCaption("Upload Process");
		uploadProcess.setImmediate(false);
		uploadProcess.setWidth("460px");
		uploadProcess.setHeight("-1px");
		mainLayout.addComponent(uploadProcess, "top:114.0px;left:200.0px;");
		
		return mainLayout;
	}

}

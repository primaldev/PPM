package org.primaldev.ppm.ui.task;

import java.util.List;

import org.activiti.engine.task.Task;
import org.activiti.engine.task.TaskQuery;
import org.primaldev.ppm.util.OnEnterKeyHandler;
import org.primaldev.ppm.util.ProcessUtil;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container.Filter;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.util.filter.SimpleStringFilter;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.PopupView;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnGenerator;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class ExploreTasks extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Label filterLabel;
	@AutoGenerated
	private ComboBox filterAssignBox;
	@AutoGenerated
	private ProductTaskTable productTaskTable_1;
	@AutoGenerated
	private Button filterButton;
	@AutoGenerated
	private TextField filterField;
	public static final String NAME = "ExploreTasks";

	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	
	
	
	
	public ExploreTasks() {
		initTable();
		
	}
	
	public ExploreTasks(String lockedFilterName) {
		initTable();
		filterAssignBox.setValue(lockedFilterName);
		filterAssignBox.setReadOnly(true);
	}
	
	private void initTable(){
		buildMainLayout();
		setCompositionRoot(mainLayout);	
		addAssignFilter();
		productTaskTable_1.setTasksToShow(queryForTasksToShow());
		productTaskTable_1.addGeneratedColumn("name", createNameColumnGenerator());
		addClickListeners();
	}
	
	private void addAssignFilter(){
		filterAssignBox.addItem("All");
		filterAssignBox.addItem("Unassigned");
		filterAssignBox.addItem("Assigned");
		filterAssignBox.setValue("All");		
		filterAssignBox.setTextInputAllowed(false);
		filterAssignBox.setNullSelectionAllowed(false);
	}

	private void addClickListeners(){
		filterAssignBox.addValueChangeListener(new ValueChangeListener(){

			@Override
			public void valueChange(ValueChangeEvent event) {
				updateTaskList();
				
			}
			
		});
		
		filterButton.addClickListener( new Button.ClickListener()  {
		    /**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			public void buttonClick(Button.ClickEvent event) {	
				updateTaskList();
		    }
		});
		
		
		OnEnterKeyHandler onEnterHandler=new OnEnterKeyHandler(){
            @Override
            public void onEnterKeyPressed() {
            	updateTaskList();
            }
        };
		
        onEnterHandler.installOn(filterField);
	}
	

	
	@SuppressWarnings("serial")
	private ColumnGenerator createNameColumnGenerator() {
		return new ColumnGenerator() {
			@Override
			public Component generateCell(Table source, Object itemId,
					Object columnId) {
				TaskProd task = (TaskProd) itemId;				
				PopupView popupView = createTaskPopup(task);
				return popupView;
			}
		};
	}


	
	protected PopupView createTaskPopup(final TaskProd task) {
		final VerticalLayout layout = new VerticalLayout();
		final TaskAssignPopup taskAssignPopup = new TaskAssignPopup(task.getName(), layout);
		taskAssignPopup.createTaskPopup(task, layout);
		return taskAssignPopup;
	}
	
	private void filterTable(){
		
		productTaskTable_1.dataSource.removeAllContainerFilters();
		
		if (filterField.getValue().length() > 0) {
			Filter filter = new TaskTableFilter(null,"(?i:.*(" + filterField.getValue() + ").*)",filterLabel );
			productTaskTable_1.dataSource.addContainerFilter(filter);
			
		}
		
		
	}
	
	
	

	protected void setTasks(List<TaskProd> tasks) {
		try {
			productTaskTable_1.dataSource.removeAllItems();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//filterTable();
		if(tasks!=null && !tasks.isEmpty() ) {
			productTaskTable_1.dataSource.addAll(tasks);
		}
		
		
	}
	
	public void updateTaskList() {
		List<TaskProd> tasksToShow = queryForTasksToShow();
		
		setTasks(tasksToShow);
	}
	
	protected List<TaskProd> queryForTasksToShow() {
		String currentUser = ProcessUtil.getIdOfCurrentUser();
		TaskQuery query = ProcessUtil.getTaskService().createTaskQuery();
		
		if (filterAssignBox.getValue().toString().equalsIgnoreCase("all")) {
			query.active().orderByTaskPriority().desc().orderByDueDate().desc();
		}
		
		if (filterAssignBox.getValue().toString().equalsIgnoreCase("unassigned")) {
			query.taskUnassigned().taskCandidateUser(currentUser).orderByTaskPriority().desc().orderByDueDate().desc();
		}
		
		if (filterAssignBox.getValue().toString().equalsIgnoreCase("assigned")) {
			query.taskAssignee(currentUser).orderByTaskPriority().desc().orderByDueDate().desc();
		}	
	
		return new TaskProdList(query.list()).getTaskProd();
		
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("997px");
		mainLayout.setHeight("700px");
		
		// top-level component properties
		setWidth("997px");
		setHeight("700px");
		
		// filterField
		filterField = new TextField();
		filterField.setCaption("Filter");
		filterField.setImmediate(true);
		filterField.setWidth("240px");
		filterField.setHeight("-1px");
		mainLayout.addComponent(filterField, "top:40.0px;left:40.0px;");
		
		// filterButton
		filterButton = new Button();
		filterButton.setCaption("Go");
		filterButton.setImmediate(true);
		filterButton.setWidth("-1px");
		filterButton.setHeight("-1px");
		mainLayout.addComponent(filterButton, "top:40.0px;left:300.0px;");
		
		// productTaskTable_1
		productTaskTable_1 = new ProductTaskTable();
		productTaskTable_1.setImmediate(false);
		productTaskTable_1.setWidth("894px");
		productTaskTable_1.setHeight("520px");
		mainLayout.addComponent(productTaskTable_1, "top:140.0px;left:0.0px;");
		
		// filterAssignBox
		filterAssignBox = new ComboBox();
		filterAssignBox.setCaption("Show Tasks");
		filterAssignBox.setImmediate(true);
		filterAssignBox.setWidth("178px");
		filterAssignBox.setHeight("-1px");
		mainLayout.addComponent(filterAssignBox, "top:96.0px;left:42.0px;");
		
		// filterLabel
		filterLabel = new Label();
		filterLabel.setImmediate(true);
		filterLabel.setWidth("240px");
		filterLabel.setHeight("-1px");
		filterLabel.setValue("");
		mainLayout.addComponent(filterLabel, "top:40.0px;left:360.0px;");
		
		return mainLayout;
	}

}

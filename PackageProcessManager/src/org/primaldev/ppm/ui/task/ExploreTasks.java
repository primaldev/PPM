package org.primaldev.ppm.ui.task;

import java.util.List;

import org.activiti.engine.task.Task;
import org.activiti.engine.task.TaskQuery;
import org.primaldev.ppm.util.ProcessUtil;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container.ItemSetChangeEvent;
import com.vaadin.data.Container.ItemSetChangeListener;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.PopupView;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnGenerator;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class ExploreTasks extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private ComboBox filterAssignBox;
	@AutoGenerated
	private ProductTaskTable productTaskTable_1;
	@AutoGenerated
	private Button searchButton;
	@AutoGenerated
	private TextField searchField;
	public static final String NAME = "ExploreTasks";

	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	
	private BeanItemContainer<Task> dataSource;
	
	
	public ExploreTasks() {
		initTable();
		
	}
	
	public ExploreTasks(String lockedFilterName) {
		initTable();
		filterAssignBox.setValue(lockedFilterName);
		filterAssignBox.setReadOnly(true);
	}
	
	private void initTable(){
		buildMainLayout();
		setCompositionRoot(mainLayout);	
		addAssignFilter();
		productTaskTable_1.setTasksToShow(queryForTasksToShow());
		productTaskTable_1.addGeneratedColumn("name", createNameColumnGenerator());
		addClickListeners();
	}
	
	private void addAssignFilter(){
		filterAssignBox.addItem("All");
		filterAssignBox.addItem("Unassigned");
		filterAssignBox.addItem("Assigned");
		filterAssignBox.setValue("All");		
		filterAssignBox.setTextInputAllowed(false);
		filterAssignBox.setNullSelectionAllowed(false);
	}

	private void addClickListeners(){
		filterAssignBox.addValueChangeListener(new ValueChangeListener(){

			@Override
			public void valueChange(ValueChangeEvent event) {
				updateTaskList();
				
			}
			
		});
	}
	
	@SuppressWarnings("serial")
	private ColumnGenerator createNameColumnGenerator() {
		return new ColumnGenerator() {
			@Override
			public Component generateCell(Table source, Object itemId,
					Object columnId) {
				Task task = (Task) itemId;				
				PopupView popupView = createTaskPopup(task);
				return popupView;
			}
		};
	}


	
	protected PopupView createTaskPopup(final Task task) {
		final VerticalLayout layout = new VerticalLayout();
		final TaskAssignPopup taskAssignPopup = new TaskAssignPopup(task.getName(), layout);
		taskAssignPopup.createTaskPopup(task, layout);
		return taskAssignPopup;
	}

	public void setTasks(List<Task> tasks) {
		try {
			productTaskTable_1.dataSource.removeAllItems();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		if(tasks!=null && !tasks.isEmpty() ) {
			productTaskTable_1.dataSource.addAll(tasks);
		}
		
	}
	
	protected void updateTaskList() {
		List<Task> tasksToShow = queryForTasksToShow();
		setTasks(tasksToShow);
	}
	
	protected List<Task> queryForTasksToShow() {
		String currentUser = ProcessUtil.getIdOfCurrentUser();
		TaskQuery query = ProcessUtil.getTaskService().createTaskQuery();
		
		if (filterAssignBox.getValue().toString().equalsIgnoreCase("all")) {
			query.active().orderByTaskPriority().desc().orderByDueDate().desc();
		}
		
		if (filterAssignBox.getValue().toString().equalsIgnoreCase("unassigned")) {
			query.taskUnassigned().taskCandidateUser(currentUser).orderByTaskPriority().desc().orderByDueDate().desc();
		}
		
		if (filterAssignBox.getValue().toString().equalsIgnoreCase("assigned")) {
			query.taskAssignee(currentUser).orderByTaskPriority().desc().orderByDueDate().desc();
		}
		
		return query.list();		
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("997px");
		mainLayout.setHeight("700px");
		
		// top-level component properties
		setWidth("997px");
		setHeight("700px");
		
		// searchField
		searchField = new TextField();
		searchField.setCaption("Search");
		searchField.setImmediate(true);
		searchField.setWidth("180px");
		searchField.setHeight("-1px");
		mainLayout.addComponent(searchField, "top:40.0px;left:40.0px;");
		
		// searchButton
		searchButton = new Button();
		searchButton.setCaption("Go");
		searchButton.setImmediate(true);
		searchButton.setWidth("-1px");
		searchButton.setHeight("-1px");
		mainLayout.addComponent(searchButton, "top:40.0px;left:610.0px;");
		
		// productTaskTable_1
		productTaskTable_1 = new ProductTaskTable();
		productTaskTable_1.setImmediate(false);
		productTaskTable_1.setWidth("894px");
		productTaskTable_1.setHeight("520px");
		mainLayout.addComponent(productTaskTable_1, "top:140.0px;left:0.0px;");
		
		// filterAssignBox
		filterAssignBox = new ComboBox();
		filterAssignBox.setNullSelectionAllowed(false);		
		filterAssignBox.setCaption("Show");
		filterAssignBox.setImmediate(true);
		filterAssignBox.setWidth("178px");
		filterAssignBox.setHeight("-1px");
		mainLayout.addComponent(filterAssignBox, "top:96.0px;left:42.0px;");
		
		return mainLayout;
	}

}

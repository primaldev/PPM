package org.primaldev.ppm.ui.identity;

import org.activiti.engine.IdentityService;
import org.activiti.engine.identity.User;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.Window;

public class UserForm extends CustomComponent {
	
	@AutoGenerated
	private AbsoluteLayout mainLayout;

	@AutoGenerated
	private Label erroLabel;

	@AutoGenerated
	private Button cancelButton;

	@AutoGenerated
	private Button submitButton;

	@AutoGenerated
	private PasswordField passwordField_2;

	@AutoGenerated
	private PasswordField passwordField_1;

	@AutoGenerated
	private TextField emailField;

	@AutoGenerated
	private TextField surnameField;

	@AutoGenerated
	private TextField nameField;

	@AutoGenerated
	private TextField userNameField;

	Window mywindow;
	User formUser;
	IdentityService idService;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public UserForm(Window mywindow, User formUser, IdentityService idService, boolean newUser) {
		this.mywindow = mywindow;
		this.formUser = formUser;
		this.idService = idService;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		addClicklisteners();
		
	}

	public UserForm(Window mywindow, User formUser, IdentityService idService) {
		this.mywindow = mywindow;
		this.formUser = formUser;
		this.idService = idService;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		addClicklisteners();		
		fillTableFields();
		lockIDfield();
		
	}
	
	private void lockIDfield(){
		userNameField.setEnabled(false);
	}
	
	private void fillTableFields(){
		userNameField.setValue(formUser.getId());
		nameField.setValue(formUser.getFirstName());
		surnameField.setValue(formUser.getLastName());
		emailField.setValue(formUser.getEmail());
		passwordField_1.setValue(formUser.getPassword());
		passwordField_2.setValue(formUser.getPassword());
	}
	
	private void addClicklisteners() {
		
		submitButton.addClickListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				formSubmit();
			}
		});
		
		cancelButton.addClickListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				UI.getCurrent().removeWindow(mywindow);
			}
		});
	}
	
	
	private void formSubmit() {
		boolean formsubmit = true;
		
		if (userNameField.getValue().length() < 4 ) {
			userNameField.setRequired(true);			
			warnUser("User Name");
			formsubmit=false;
		}else{
			userNameField.setRequired(false);
			
		}
		
		if (nameField.getValue().length() < 2 ) {
			nameField.setRequired(true);
			warnUser("Name");
			formsubmit=false;
		}else{
			nameField.setRequired(false);
		}
		
		if (surnameField.getValue().length() < 2 ) {
			surnameField.setRequired(true);
			warnUser("Surname");
			formsubmit=false;
		}else{
			surnameField.setRequired(false);
		}
		
		if (passwordField_1.getValue().length() < 6 ) {
			passwordField_1.setRequired(true);
			passwordField_2.setRequired(true);
			warnUser("Surname");
			formsubmit=false;
			if (!passwordField_1.getValue().equals(passwordField_2.getValue())){
				passwordField_1.setRequired(true);
				passwordField_2.setRequired(true);
				erroLabel.setValue("Passwords do not match");
				formsubmit=false;
			} 		
			
			
		}else{
			passwordField_1.setRequired(false);
			passwordField_2.setRequired(false);
		}
		

		
		if (formsubmit){
			
			formUser.setId(userNameField.getValue());
			formUser.setFirstName(nameField.getValue());
			formUser.setLastName(surnameField.getValue());
			formUser.setPassword(passwordField_1.getValue());
			formUser.setEmail(emailField.getValue());
			idService.saveUser(formUser);
			idService.createMembership(userNameField.getValue(), "users");
			UI.getCurrent().removeWindow(mywindow);
			Notification.show("User Form",
	                "User Added...",
	                Notification.Type.TRAY_NOTIFICATION);
		}
		
	}
	
	private void warnUser(String wtf) {
		
		erroLabel.setValue("Some required values were not completed.");
		
	}
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("400px");
		mainLayout.setHeight("460px");
		
		// top-level component properties
		setWidth("400px");
		setHeight("460px");
		
		// userNameField
		userNameField = new TextField();
		userNameField.setCaption("Username");
		userNameField.setImmediate(false);
		userNameField.setWidth("200px");
		userNameField.setHeight("-1px");
		mainLayout.addComponent(userNameField, "top:40.0px;left:40.0px;");
		
		// nameField
		nameField = new TextField();
		nameField.setCaption("Name");
		nameField.setImmediate(false);
		nameField.setWidth("157px");
		nameField.setHeight("-1px");
		mainLayout.addComponent(nameField, "top:96.0px;left:40.0px;");
		
		// surnameField
		surnameField = new TextField();
		surnameField.setCaption("Surname");
		surnameField.setImmediate(false);
		surnameField.setWidth("317px");
		surnameField.setHeight("-1px");
		mainLayout.addComponent(surnameField, "top:160.0px;left:40.0px;");
		
		// emailField
		emailField = new TextField();
		emailField.setCaption("Email");
		emailField.setImmediate(false);
		emailField.setWidth("280px");
		emailField.setHeight("-1px");
		mainLayout.addComponent(emailField, "top:220.0px;left:40.0px;");
		
		// passwordField_1
		passwordField_1 = new PasswordField();
		passwordField_1.setCaption("Password");
		passwordField_1.setImmediate(false);
		passwordField_1.setWidth("220px");
		passwordField_1.setHeight("-1px");
		mainLayout.addComponent(passwordField_1, "top:280.0px;left:40.0px;");
		
		// passwordField_2
		passwordField_2 = new PasswordField();
		passwordField_2.setCaption("Password Confirm");
		passwordField_2.setImmediate(false);
		passwordField_2.setWidth("220px");
		passwordField_2.setHeight("-1px");
		mainLayout.addComponent(passwordField_2, "top:340.0px;left:40.0px;");
		
		// submitButton
		submitButton = new Button();
		submitButton.setCaption("Save");
		submitButton.setImmediate(true);
		submitButton.setWidth("-1px");
		submitButton.setHeight("-1px");
		mainLayout.addComponent(submitButton, "top:414.0px;left:60.0px;");
		
		// cancelButton
		cancelButton = new Button();
		cancelButton.setCaption("Cancel");
		cancelButton.setImmediate(true);
		cancelButton.setWidth("-1px");
		cancelButton.setHeight("26px");
		mainLayout.addComponent(cancelButton, "top:414.0px;left:240.0px;");
		
		// erroLabel
		erroLabel = new Label();
		erroLabel.setImmediate(false);
		erroLabel.setWidth("320px");
		erroLabel.setHeight("18px");
		erroLabel.setValue(" ");
		mainLayout.addComponent(erroLabel, "top:382.0px;left:40.0px;");
		
		return mainLayout;
	}

}

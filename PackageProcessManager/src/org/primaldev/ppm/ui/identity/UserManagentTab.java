package org.primaldev.ppm.ui.identity;

import java.util.List;

import org.activiti.engine.IdentityService;
import org.activiti.engine.ProcessEngines;
import org.activiti.engine.identity.User;
import org.activiti.engine.identity.UserQuery;
import org.vaadin.dialogs.ConfirmDialog;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Table;
import com.vaadin.ui.UI;
import com.vaadin.ui.Window;
import com.vaadin.ui.Window.CloseEvent;
import com.vaadin.ui.Window.CloseListener;

public class UserManagentTab extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Table userListTable;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_2;
	@AutoGenerated
	private Button groupMemebers;
	@AutoGenerated
	private Button removeUser;
	@AutoGenerated
	private Button editUser;
	@AutoGenerated
	private Button addUser;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public UserManagentTab() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		initTable();
		addClickListeners();
		// TODO add user code here
	}
	
	private void initTable() {
		userListTable.setSizeFull();
		userListTable.setSelectable(true);
		userListTable.setImmediate(true);
		userListTable.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				updateButtonStates();
			}
		});
		
		
		UserQuery query = getIdentityService().createUserQuery();
		List<User> allUsers = query.orderByUserId().asc().list();
		BeanItemContainer<User> dataSource = new BeanItemContainer<User>(
				User.class, allUsers);
		userListTable.setContainerDataSource(dataSource);
		userListTable.setVisibleColumns(new String[] { "id", "firstName",
				"lastName", "email" });
		updateButtonStates();
	}
	
	
	private void addClickListeners(){
		
		addUser.addClickListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				addUser();
			}
		});
		
		editUser.addClickListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				editUser();
			}
		});
		
		
		removeUser.addClickListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				removeUser();
			}
		});
		
		groupMemebers.addClickListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				manageGroupMemberships();
			}
		});
		
	}
	
	
	private void manageGroupMemberships() {
		User selectedUser = (User) userListTable.getValue();
		if (selectedUser != null) {
			
			Window groupFormWindow = new Window("Group Select");
			UserGroupForm userForm = new UserGroupForm(groupFormWindow, selectedUser.getId());
			groupFormWindow.setContent(userForm);
			groupFormWindow.setSizeUndefined();
			UI.getCurrent().addWindow(groupFormWindow);
			
			groupFormWindow.addCloseListener(new CloseListener(){

				@Override
				public void windowClose(CloseEvent e) {
					initTable();
					
				} 
				
			});
			
			
			
		}
	}
	
	private void removeUser() {
		User selectedUser = (User) userListTable.getValue();
		if (selectedUser != null) {
			ConfirmDialog.show(getUI(), "Please Confirm:", "Are you really sure?",
			        "I am", "Not quite",  new ConfirmDialog.Listener() {

			            public void onClose(ConfirmDialog dialog) {
			                if (dialog.isConfirmed()) {
			                	removeUSerConfirmed();
			                } 
			            }
			        });
			        
			
		}
	}
	
	private void removeUSerConfirmed(){
		User selectedUser = (User) userListTable.getValue();
		if (selectedUser != null) {
			getIdentityService().deleteUser(selectedUser.getId());
			initTable();
		}
		
	}
	

	
	private void addUser() {
		User newUser = getIdentityService().newUser("newUser");
		
		
		Window userFormWindow = new Window("User Form");
		UserForm userForm = new UserForm(userFormWindow,newUser,getIdentityService(),true);
		userFormWindow.setContent(userForm);
		userFormWindow.setSizeUndefined();
		UI.getCurrent().addWindow(userFormWindow);
		
		userFormWindow.addCloseListener(new CloseListener(){

			@Override
			public void windowClose(CloseEvent e) {
				initTable();
				
			} 
			
		});
		
		
		
	/*	UserFormWindow addUserWindow = UserFormWindow.addUserWindow(
				new UserFormWindow.UserCallback() {

					@Override
					public void saveUser(User user) {
						getIdentityService().saveUser(user);
						populateTable();
					}
				}, newUser);
				
		getWindow().addWindow(addUserWindow);*/
		
	}
	
	private void editUser() {
		User selectedUser = (User) userListTable.getValue();
		if (selectedUser != null) {
			Window userFormWindow = new Window("User Form");
			UserForm userForm = new UserForm(userFormWindow,selectedUser,getIdentityService());
			userFormWindow.setContent(userForm);
			userFormWindow.setSizeUndefined();
			UI.getCurrent().addWindow(userFormWindow);
			
			userFormWindow.addCloseListener(new CloseListener(){

				@Override
				public void windowClose(CloseEvent e) {
					initTable();
					
				} 
				
			});

		}
	}
	
	
	private void updateButtonStates() {
		boolean isUserSelected = userListTable.getValue() != null;
		editUser.setEnabled(isUserSelected);
		removeUser.setEnabled(isUserSelected);
		groupMemebers.setEnabled(isUserSelected);
	}
	
	private IdentityService getIdentityService() {
		return ProcessEngines.getDefaultProcessEngine().getIdentityService();
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("680px");
		mainLayout.setHeight("500px");
		
		// top-level component properties
		setWidth("680px");
		setHeight("500px");
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		mainLayout.addComponent(horizontalLayout_1, "top:0.0px;left:0.0px;");
		
		// userListTable
		userListTable = new Table();
		userListTable.setImmediate(false);
		userListTable.setWidth("100.0%");
		userListTable.setHeight("100.0%");
		mainLayout.addComponent(userListTable,
				"top:60.0px;right:0.0px;bottom:0.0px;left:0.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("657px");
		horizontalLayout_1.setHeight("60px");
		horizontalLayout_1.setMargin(false);
		
		// horizontalLayout_2
		horizontalLayout_2 = buildHorizontalLayout_2();
		horizontalLayout_1.addComponent(horizontalLayout_2);
		
		return horizontalLayout_1;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_2() {
		// common part: create layout
		horizontalLayout_2 = new HorizontalLayout();
		horizontalLayout_2.setImmediate(false);
		horizontalLayout_2.setWidth("540px");
		horizontalLayout_2.setHeight("60px");
		horizontalLayout_2.setMargin(false);
		
		// addUser
		addUser = new Button();
		addUser.setCaption("Add User");
		addUser.setImmediate(true);
		addUser.setWidth("-1px");
		addUser.setHeight("-1px");
		horizontalLayout_2.addComponent(addUser);
		horizontalLayout_2.setComponentAlignment(addUser, new Alignment(48));
		
		// editUser
		editUser = new Button();
		editUser.setCaption("Edit User");
		editUser.setImmediate(true);
		editUser.setWidth("-1px");
		editUser.setHeight("-1px");
		horizontalLayout_2.addComponent(editUser);
		horizontalLayout_2.setComponentAlignment(editUser, new Alignment(48));
		
		// removeUser
		removeUser = new Button();
		removeUser.setCaption("Remove User");
		removeUser.setImmediate(true);
		removeUser.setWidth("-1px");
		removeUser.setHeight("-1px");
		horizontalLayout_2.addComponent(removeUser);
		horizontalLayout_2.setComponentAlignment(removeUser, new Alignment(48));
		
		// groupMemebers
		groupMemebers = new Button();
		groupMemebers.setCaption("Group Memebership");
		groupMemebers.setImmediate(true);
		groupMemebers.setWidth("-1px");
		groupMemebers.setHeight("-1px");
		horizontalLayout_2.addComponent(groupMemebers);
		horizontalLayout_2.setComponentAlignment(groupMemebers, new Alignment(
				48));
		
		return horizontalLayout_2;
	}

}

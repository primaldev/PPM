package org.primaldev.ppm.ui.identity;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.activiti.engine.IdentityService;
import org.activiti.engine.ProcessEngines;
import org.activiti.engine.identity.Group;
import org.activiti.engine.identity.GroupQuery;
import org.primaldev.ppm.util.OnEnterKeyHandler;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.Window;

public class GroupForm extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private ComboBox groupTypeSelect;
	@AutoGenerated
	private Label label_1;
	@AutoGenerated
	private Button cancelButton;
	@AutoGenerated
	private Button saveButton;
	@AutoGenerated
	private TextField groupNameField;
	Window mywindow;
	boolean newGroup;
	Group group;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public GroupForm(Window mywindow) {
		this.mywindow = mywindow;
		 initWindow();
		newGroup = true;
		
	}

	public GroupForm(Window mywindow, Group group) {
		this.mywindow = mywindow;
		this.group = group;
		 initWindow();
		newGroup = false;
		groupNameField.setValue(group.getName());		
		groupTypeSelect.select(group.getType());
	}
	
	
	private void initWindow() {
		
		buildMainLayout();
		setCompositionRoot(mainLayout);
		addClicklisteners();
		groupTypeSelect.addItems(getGroupTypes());
		groupTypeSelect.setNullSelectionAllowed(false);
		groupTypeSelect.setNewItemsAllowed(true);
		
		
	}
	
	private List<String> getGroupTypes(){
		List<String> groupTypes= new ArrayList<String>();
		
		for (Group group : getAllGroups()){
			groupTypes.add(group.getType());
		}
		return groupTypes;
		
	}
	
	
	private void addClicklisteners() {
		
		saveButton.addClickListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				formSubmit();
			}
		});
		
		cancelButton.addClickListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				UI.getCurrent().removeWindow(mywindow);
			}
		});
		
		OnEnterKeyHandler onEnterHandler=new OnEnterKeyHandler(){
            @Override
            public void onEnterKeyPressed() {
            	formSubmit();
            }
        };        
        
        onEnterHandler.installOn(groupNameField);
       
	}
	
	
	private void formSubmit(){
		boolean groupExist=false;
		if (newGroup) {
			Group newGroup = getIdentityService().newGroup("newGroup");				
			
			for (Group group : getAllGroups()) {
				if (group.getName().equalsIgnoreCase(groupNameField.getValue())) {
					groupExist=true;					
				}
			}			
			
			if (groupExist) {
				label_1.setValue("Error: Group allready exists.");
			}else{
				newGroup.setId(UUID.randomUUID().toString());
				newGroup.setName(groupNameField.getValue());	
				newGroup.setType(groupTypeSelect.getValue().toString());
				getIdentityService().saveGroup(newGroup);
				UI.getCurrent().removeWindow(mywindow);
			}
			
		} else {
			group.setName(groupNameField.getValue());
			getIdentityService().saveGroup(group);
			UI.getCurrent().removeWindow(mywindow);
		}		
		
	}
	
	private List<Group> getAllGroups() {
		GroupQuery query = getIdentityService().createGroupQuery();		
		return query.orderByGroupId().asc().list();		
	}		

	
	private IdentityService getIdentityService() {
		return ProcessEngines.getDefaultProcessEngine().getIdentityService();
	}
	
	
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("380px");
		mainLayout.setHeight("240px");
		
		// top-level component properties
		setWidth("380px");
		setHeight("240px");
		
		// groupNameField
		groupNameField = new TextField();
		groupNameField.setCaption("Group Name");
		groupNameField.setImmediate(false);
		groupNameField.setWidth("100.0%");
		groupNameField.setHeight("-1px");
		groupNameField.setMaxLength(30);
		mainLayout.addComponent(groupNameField,
				"top:40.0px;right:52.0px;left:60.0px;");
		
		// saveButton
		saveButton = new Button();
		saveButton.setCaption("Submit");
		saveButton.setImmediate(true);
		saveButton.setWidth("-1px");
		saveButton.setHeight("-1px");
		mainLayout.addComponent(saveButton, "top:180.0px;left:60.0px;");
		
		// cancelButton
		cancelButton = new Button();
		cancelButton.setCaption("Cacel");
		cancelButton.setImmediate(true);
		cancelButton.setWidth("-1px");
		cancelButton.setHeight("-1px");
		mainLayout.addComponent(cancelButton, "top:180.0px;left:254.0px;");
		
		// label_1
		label_1 = new Label();
		label_1.setImmediate(false);
		label_1.setWidth("260px");
		label_1.setHeight("-1px");
		label_1.setValue("");
		mainLayout.addComponent(label_1, "top:140.0px;left:60.0px;");
		
		// groupTypeSelect
		groupTypeSelect = new ComboBox();
		groupTypeSelect.setCaption("Group Type");
		groupTypeSelect.setImmediate(false);
		groupTypeSelect.setWidth("260px");
		groupTypeSelect.setHeight("-1px");
		mainLayout.addComponent(groupTypeSelect, "top:96.0px;left:60.0px;");
		
		return mainLayout;
	}

}
